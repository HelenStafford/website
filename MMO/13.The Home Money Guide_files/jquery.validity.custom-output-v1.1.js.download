(function(){

    // The output mode will be named whatever you assign it to.
    // In this example, since we're assigning it to 'myOutputMode'
    // it will be called 'myOutputMode'.
    $.validity.outputs.metaValidation = {
 
        slideNumber: 0,
        popUpError: '',
        resultsValidFunctions: [],

        // return slide number
        getSlideNumber:function()
        {
            return this.slideNumber;
        },

        // set the slide field to return to
        setSlideNumber:function(newSlideNumber)
        {
            this.slideNumber = newSlideNumber;
        },

        // The start function will be called when validation starts.
        // This allows you to prepare the page for validation, for instance
        // you might remove any validation messages that are already on the page.
        start: function () {
            this.popUpError = 'The following error(s) have occurred:\n\n';
            this.setSlideNumber(0);
        },
        
        // The end function is called when validation has concluded.
        // This allows you to flush any buffers or do anything you need to
        // after all of the validators have been called.
        // results will be the results object.
        // results.valid is a boolean representing whether the form is valid.
        // results.errors is an integer of how many errors there are.
        end: function (results) {
            if (!results.valid) {
                alert(this.popUpError);
                if (this.slideNumber > 0) {
                    try {
                        slider_api.jump('=' + this.slideNumber);
                    }
                    catch (e) {
                        // do not handle catch further
                    }
                }
            }
            else
            {   


                //console.log(this.slideNumber + ' slide');

                if(this.resultsValidFunctions.length > 0 && RegPath.isFormSubmit == true)
                {
                    for(var i = 0;i<this.resultsValidFunctions.length;i++)
                    {
                        eval(this.resultsValidFunctions[i]);
                    }
                    RegPath.showSubmitOverlay();
                }

                if(RegPath.reCAPTCHACheck != "undefined")
                {
                    if(typeof grecaptcha != "undefined" && RegPath.reCAPTCHACheck == false)
                    {

                        console.debug("doing recaptcha");
                        event.preventDefault();
                        event.stopPropagation();
                        $('form').unbind('submit').bind('submit', function () { return false; });
                        grecaptcha.execute();
                        return false;
                    }
                }

            

                if (RegPath && typeof RegPath["stopMultipleSubmit"] != "undefined") 
                {
                    if (RegPath.stopMultipleSubmit == true) { // remove ability to submit the form multiple times
                        console.debug('Blocked multiple submits');
                        $('form').unbind('submit').bind('submit', function () { return false; });//return false;
                    }
                }
            }
        },
        
        // The raise function is called to raise an error for a specific input.
        // The first argument is a jQuery object of the input to raise the error message for.
        // The second argument is the string of the error message.
        raise:function($obj, msg){
            // Make the JavaScript alert box with the message:
            this.popUpError += msg + '\n';
            currentSlideNumber = parseInt($obj.data('slide-number'));
            if (!isNaN(currentSlideNumber) && this.getSlideNumber() == 0 || this.getSlideNumber() > currentSlideNumber)
                this.slideNumber = currentSlideNumber;
                
        },
        
        // The raiseAggregate function is similar to the raise function, except that
        // the $obj argument will be a jQuery object of several inputs, 
        // all of which are invalid aggregately.
        raiseAggregate:function($obj, msg){ 
            this.raise($($obj.get($obj.length - 1)), msg);
        },
    }
})();

// Now enable the output mode we just installed.
$.validity.setup({ outputMode:'metaValidation' });