var recaptchaOnSuccess = function () {
   
    //we would record reCapthca Here
    var getCaptchaResponse = grecaptcha.getResponse();
     console.log(getCaptchaResponse);
        $.post("/api/integrity-check?TYPE=1",
                    getCaptchaResponse,
                    function(data, status){
                      console.log("Data: " + getCaptchaResponse + "\nStatus: " + status);
                    //disable submit button
                    $('input[type="submit"]').attr('disabled','disabled');
                    $('form').unbind('submit');
                    $("form").submit();  

        });

}

///
///  RegPath is in charge of validations and other flow-type client-side functionality
///
///  Testing Url versioning
var RegPath = 
{
    submitPopOverUrl: "",

    anuraCheck: false,

    reCAPTCHACheck: false,
    
    anuraResponse: null,

    validateCheckOnly: false,

    zipLookupAccessToken: "",

    trustedFormRequired: false,

    resultsValidFunctions: [],

    setState: "",

    validate:
    {
        rules:{},
        messages:{},

        //submitHandler handle the form submit
        submitHandler: function(form) 
        {
            console.log('submitHAndler');
            //if form need zip lookup do it here


            //sets remotePen Critiria need hidden fields in form
            console.log(RegPath.Functions.getAge($('#txt_dob').val()));
            if (RegPath.Functions.getAge($('#txt_dob').val()) >= 40 || RegPath.Functions.getAge($('#txt_dob_drop_down').val()) >= 40) 
            {
               $('#remotePenCriteriaPassed').val('true');
            }

            //check if phone number field exist
            if($('#txt_phone').length > 0)
            {
              //unmask phone number if it exist before submit
              $('#txt_phone').unmask();
            }
            


                //do validation functions if some are set
                if(RegPath.resultsValidFunctions.length > 0)
                {
                    for(var i = 0;i<RegPath.resultsValidFunctions.length;i++)
                    {
                        eval(RegPath.resultsValidFunctions[i]);
                    }
                }
    
                //reCaptcha needs to be initialize in the container
                if(RegPath.reCAPTCHACheck == true)
                {
                    //anura needs to be initialize in the container
                        event.preventDefault();
                        event.stopPropagation();
                        $(form).unbind('submit').bind('submit', function () { return false; });

                      if(RegPath.anuraCheck)
                      {

                        //RegPath.anuraResponse.result = "bad" // to test
                        if(RegPath.anuraResponse.result != "bad")
                        {
                            //we submit the form in the grecaptcha(recaptchaOnSuccess) Callback function
                            grecaptcha.execute();
                        }
                      }
                      else
                      {
                        grecaptcha.execute();
                      }
                }
                else
                {
                      $('input[type="submit"]').attr('disabled','disabled');
                      if(RegPath.zipLookupAccessToken != "")
                      {
                         var zipLookup = $.ajax({
                                                  url: "/api/zip-lookup",
                                                  data: { zip: $('#txt_zip').val(), access_token: RegPath.zipLookupAccessToken },
                                                  }).done(function(responseJson){
                                                      if(!responseJson.success){
                                                          console.log("error: " + responseJson.message); 
                                                      }
                                                      if ($('#zip_lookup_done').length > 0) {
                                                          $('#zip_lookup_done').val('true').change();
                                                      }
                                                      //disable submit button
                                                      
                                                      form.submit();
                                                      console.log('pass lookup');
                                                 });

                             setTimeout(function(){
                                      zipLookup.abort();
                                      console.log("aborted zipLookup");
                                      form.submit();
                              }, 6000);

                      }
                      else
                      {
                        //disable submit button
                        $('input[type="submit"]').attr('disabled','disabled');
                        form.submit();

                      }

                }            
        }
    },

    loadTrustedForm: function () 
    {

        var field = 'xxTrustedFormCertUrl';
        var provideReferrer = false;
        var tf = document.createElement('script');
        tf.type = 'text/javascript'; 
        tf.async = true;
        tf.src = '//api.trustedform.com/trustedform.js?provide_referrer=' + escape(provideReferrer) + '&field=' + escape(field) + '&l=' + new Date().getTime() + Math.random();
        var s = document.getElementsByTagName('script')[0]; 
        s.parentNode.insertBefore(tf, s);
    },

    loadJornaya: function () 
    {
        var input = $('<input type="hidden" id="leadid_token" name="universal_leadid"  />');
        $('form').append(input);   

        var s = document.createElement('script');
        s.id = 'LeadiDscript_campaign';
        s.type = 'text/javascript';
        s.async = true;
        s.src = '//create.lidstatic.com/campaign/aac3d0d6-feed-beef-cafe-e88d3d2ce25e.js?snippet_version=2';


        var LeadiDscript = document.getElementsByTagName('script')[1]; //document.getElementById('LeadiDscript');
        LeadiDscript.parentNode.insertBefore(s, LeadiDscript);
    },

    postValidationPopOver: function () {
        if (BrowserDetect.browser == 'Safari')
            window.open(RegPath.submitPopOverUrl, 'nextoffer', 'scrollbars=yes, resizable=yes,toolbar=yes,directories=no,location=no,menubar=no,status=no,left=0,top=0');
        else
            window.open(RegPath.submitPopOverUrl, '_blank');
    },

    postValidationFunction: function (functionString) {
        RegPath.resultsValidFunctions.push(functionString);
    },

    validateFormSubmit: function () 
    {
      //if trusted form is require load it
      if(RegPath.trustedFormRequired == true)
      {
        RegPath.loadTrustedForm();
      }
      //if we have a pop on submit set the event here
      if(RegPath.submitPopOverUrl != "")
      {
          RegPath.resultsValidFunctions.push("RegPath.postValidationPopOver();");
      }
      //sets validate up
            $('.signupForm').validate(this.validate); // end of validate()
    },

    validateFormFields: function (arrayOfFieldsID) 
    {
            for (i = 0; i < arrayOfFieldsID.length; i++) {
                switch (arrayOfFieldsID[i]) {
                     case '#txt_email': //email
                            RegPath.setEmailValidation();
                        break;
                    case '#txt_first_name': //First Name
                            RegPath.setFirstNameValidation();
                        break;
                    case '#txt_last_name': //Last Name
                            RegPath.setLastNameValidation();
                        break;
                    case '#txt_zip': //zip
                            RegPath.setZipValidation();
                        break;
                    case '#txt_address': //address
                            RegPath.setAddressValidation();
                        break;
                    case '#txt_phone': //phone
                            RegPath.setPhoneValidation();
                        break;
                    case '#txt_dob': //dob
                            RegPath.setDOBValidation();
                        break;
                    case '#txt_dob_drop_down': //dob
                            RegPath.setDOBDropDownValidation();
                        break;
                    case '#txt_state': //dob
                            RegPath.setStateValidation();
                        break;
                    case '#txt_city': //dob
                            RegPath.setCityValidation();
                        break;
                }
            }

            this.validateFormSubmit();
    },

    setEmailValidation: function () 
    {
           this.validate.rules.email = {
                                          required: true,
                                          emailRegex: true
                                       };

        this.validate.messages.email = {
                                          required: "Email is required.",
                                          emailRegex: "Email must be in correct format example: example@example.com"
                                       };

        //custom method to validate email format. for each???
        $.validator.addMethod("emailRegex",function(value,element)
        {
        return /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(value);
        });

        if(this.anuraCheck)
        {
            //we use this "count" to stop the api from recording twice.
            var count = 0;
              RegPath.getAnuraResponse(function(anuraBotResponse){
                //we record AnuraResponse Here happens on load
                if(count == 0)
                {
                   $.post("/api/integrity-check?TYPE=2",
                          anuraBotResponse,
                          function(data, status){
                            console.log("Data: " + anuraBotResponse + "\nStatus: " + status);
                   });
                   count++;
                }

                RegPath.anuraResponse = JSON.parse(anuraBotResponse);

            });
        }
    },

    setFirstNameValidation:function(){

                   this.validate.rules.first_name = {
                      required: true,
                      fNameRegex: true
                   };

                   this.validate.messages.first_name = {
                      required: "First Name is required.",
                      fNameRegex: "Please Enter a Valid First Name"
                   };

                   $.validator.addMethod("fNameRegex",function(value,element)
                   {
                      return /^[a-zA-Z.\\'\\-\\s]+$/.test(value);
                   });
    },
    setLastNameValidation:function(){
                   this.validate.rules.last_name = {
                      required: true,
                      lNameRegex: true
                   };

                   this.validate.messages.last_name = {
                      required: "Last Name is required.",
                      lNameRegex: "Please Enter a Valid Last Name"
                   };

                   $.validator.addMethod("lNameRegex",function(value,element)
                   {
                      return /^[a-zA-Z.\\'\\-\\s]+$/.test(value);
                   });
    },
    setZipValidation:function(){
                   this.validate.rules.zip = {
                      required: true,
                      zipRegex: true
                   };

                   this.validate.messages.zip = {
                      required: "Zip is required.",
                      zipRegex: "Please Enter a Valid Zip"
                   };

                   $.validator.addMethod("zipRegex",function(value,element)
                   {
                      return /^\d{5}(?:[-]\d{4})?$/.test(value);
                   });
    },

    setAddressValidation:function()
    {     
                   this.validate.rules.address_1 = {
                      required: true
                   };

                   this.validate.messages.address_1 = {
                      required: "Address is required."
                   };

    },

    setPhoneValidation:function()
    {
        $('#txt_phone').mask('(000) 000-0000');
           this.validate.rules.phone = {
              required: true,
              phoneRegex: true
           };

           this.validate.messages.phone = {
              required: "Phone is required.",
              phoneRegex: "Please Enter a Valid Phone Number"
           };

           $.validator.addMethod("phoneRegex",function(value,element)
           {
              return /^\(\d{3}\)\s?\d{3}-\d{4}$/.test(value);
           });
    },

    setDOBValidation:function()
    {
        $('#txt_dob').mask('00/00/0000');
           this.validate.rules.dob = {
              required: true,
              dobRegex: true,
              age: true
           };

           this.validate.messages.dob = {
              required: "Date of Birth is required.",
              dobRegex: "Please Enter a Valid Date of Birth",
              age: "Must be over 18 years old"
           };

           $.validator.addMethod("age",function(value,element)
           {
              var age = RegPath.Functions.getAge($('#txt_dob').val());
              if(age >= 18)
                {
                    return true;
                }
                else
                {
                    return false;
                }
           });

           $.validator.addMethod("dobRegex",function(value,element)
           {
              return /^((1[0-2])|(0[1-9]))\/((0[1-9])|((1|2)[0-9])|(3[0-1]))\/((19|20)\d{2})$/.test(value);
           });
    },

    setDOBDropDownValidation:function()
    {
          $('#ddl_dob_month, #ddl_dob_day, #ddl_dob_year').on('change', function(){
              if ($('#txt_dob_drop_down')) 
              {
                $('#txt_dob_drop_down').val($('#ddl_dob_month').val() + "/" + $('#ddl_dob_day').val() + '/' + $('#ddl_dob_year').val());
              } 
          });

         //allow us to use the hidden field to show the error but not the input element
         this.validate.ignore = ":hidden:not(#txt_dob_drop_down)";

           this.validate.rules.dob = {
              required: true,
              dobRegex: true,
              age: true
           };

           this.validate.messages.dob = {
              required: "Date of Birth is required.",
              dobRegex: "Please Enter a Valid Date of Birth",
              age: "Must be over 18 years old"
           };


           $.validator.addMethod("dobRegex",function(value,element)
           {
              return /^((1[0-2])|(0[1-9]))\/((0[1-9])|((1|2)[0-9])|(3[0-1]))\/((19|20)\d{2})$/.test(value);
           });

           $.validator.addMethod("age",function(value,element)
           {
              var age = RegPath.Functions.getAge($('#txt_dob_drop_down').val());
              if(age >= 18)
                {
                    return true;
                }
                else
                {
                    return false;
                }
           });


    },

    setStateValidation:function()
    {
           this.validate.rules.state = {
              valueNotEquals: ""
           }
           this.validate.messages.state = {
              valueNotEquals: "State is required.",
           };

           $.validator.addMethod("valueNotEquals",function(value,element)
           {
             return value != "";
           });

    },
    setCityValidation:function()
    {     
                   this.validate.rules.city = {
                      required: true
                   };

                   this.validate.messages.city = {
                      required: "City is required."
                   };

    },



    forceLinkoutNewWindow: false,
    nextOfferUrl: "",
    linkoutWindowRequested: false,
    initNextOffer: function (forceNewWindow, offerSequenceId) {
        //RegPath.SkipOverLayEvent();

        if (typeof forceNewWindow != 'undefined' && forceNewWindow != null)
            this.forceLinkoutNewWindow = forceNewWindow;
        else
            this.forceLinkoutNewWindow = false;

        if (typeof offerSequenceId != 'undefined' && offerSequenceId > 0) {
            this.nextOfferUrl = '/api/offer?osid=' + offerSequenceId;
        }

        $("a.nextoffer, a.question-answer, a.question-answer-linkout, a.banner-linkout").unbind('click').click(function (e) {
            var clickedClass = 'nextOfferClicked';

            if ($(this).hasClass(clickedClass) == false) {
                // flag ALL answers as clicked
                $("a.nextoffer, a.question-answer, a.question-answer-linkout, a.banner-linkout").addClass(clickedClass);
                var isLinkoutOffer = $(this).hasClass('nextoffer') || $(this).hasClass('question-answer-linkout') || $(this).hasClass('banner-linkout');
                
                //RegPath.showSubmitOverlay();

                if (RegPath.nextOfferUrl.length > 0) {

                    // append answer if there is one
                    if (!$(this).hasClass("banner-linkout")) {
                        var submittedAnswer = $(this).text();
                        var reTextAnswer = /[A-Z0-9]/gi;
                        if (reTextAnswer.test(submittedAnswer))
                            RegPath.nextOfferUrl += '&a=' + encodeURI($(this).text());
                    }

                    
                    var redirectInterval = setInterval(function () {
                        // if it's not a linkout offer, or the linkout window action has been
                        // requested, then we can progress to next offer
                        if (!isLinkoutOffer || RegPath.linkoutWindowRequested) {
                            window.location = RegPath.nextOfferUrl;
                            clearInterval(redirectInterval);
                        }
                    }, 125);
                }

                if (isLinkoutOffer) {
                    if (BrowserDetect.browser == 'Safari' || RegPath.forceLinkoutNewWindow) {
                        var uniqueBase = new Date();
                        var uniqueWindowName = 'nextoffer_' + uniqueBase.getTime();
                        RegPath.linkoutWindowRequested = true;
                        var nextoffer = window.open(this.href, uniqueWindowName, 'scrollbars=yes, resizable=yes,toolbar=yes,directories=no,location=no,menubar=no,status=no,left=0,top=0');
                        if (nextoffer != null)
                            nextoffer.focus();
                        return false;
                    }
                    else {
                        RegPath.linkoutWindowRequested = true;
                    }
                }

            }
            else {
                e.preventDefault();
                console.debug('Blocked additional click to :' + RegPath.nextOfferUrl);
            }
        });
    },

    showNextOffer: function (offerSequenceId, answerText) {
          var urlParams = [];
          if (offerSequenceId)
              urlParams.push("osid=" + offerSequenceId);
          if (answerText)
              urlParams.push("a=" + encodeURI(answerText));

          window.location = '/api/offer' + (urlParams.length > 0 ? "?" + urlParams.join("&") : "");
    },
getAnuraResponse: function (callback){  
        var interval = setInterval(function()
            {
                if ('object' === typeof Anura) 
                {                      
                        // declare the response object when available
                        var response = Anura.getAnura();
                        // when the response ID is available
                    if (response.getId()) 
                    {
                        // clear defined intervals!
                        clearInterval(interval);
                        getResult(response.getId());
                        

                    }
                }
            }, 50);
        var getResult = function(id) {
            var method = 'POST';
            var params = [
                'instance=1983232990',
                'id='+encodeURIComponent(id)        
            ];
            var url = '//script.anura.io/result.json'+('GET' === method ? '?'+params.join('&'): '');
            // internet explorer 8-9
            if (window.XDomainRequest) {
                var http = new XDomainRequest();
                if (http) {
                    http.open(method, url);
                    http.onprogress = function(){};
                    http.ontimeout = function(){};
                    http.onerror = function(){};
                    http.onload = function(){
                    // continue with your custom result handler...
                    };
                    setTimeout(function(){
                        http.send('POST' === method ? params.join('&'): '');
                    }, 0);            
                }
                // other browsers
                } else if (window.XMLHttpRequest) {
                    var http = new XMLHttpRequest();
                    if (http &&'withCredentials'in http) {
                        http.open(method, url, true);
                        if ('POST' === method) http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                        http.onreadystatechange = function() {
                            // continue with your custom result handler...
                            if(typeof http.response !== "undefined" && http.response != ""){
                                callback(http.response.toString());
                            }
                        }
                        http.send('POST' === method ? params.join('&'): '');
                    }
                }
        }
   },

};