// sexyDrops
// A plugins for making select dropdowns sexy
// version 1.5, Nov 8, 2012
// by Jason Stockman - jason@xyz.com, Cyber2Media

/*
CHANGELOG

1.31
- Updated focus / click event for IE compatibility

1.32
- Changed BIND event to LIVE for IE 7 compatibility

1.4 
- Reworked events entirely for IE compatibility

1.5
- Added height and line height support for non IE compatibility
- Added resize event to scale elements for responsive

*/

(function($) {

    // here we go!
    $.sexyDrops = function(element, options) {
    	
    	// if IE6 we exit
		if ($.browser.msie && $.browser.version.substr(0,1)<7) {
			return false;
		}

        // to avoid confusions, use "plugin" to reference the 
        // current instance of the object
        var plugin = this;

        // this will hold the merged default, and user-provided options
        // plugin's properties will be available through this object like:
        // plugin.settings.propertyName from inside the plugin or
        // element.data('sexyDrops').settings.propertyName from outside the plugin, 
        // where "element" is the element the plugin is attached to;
        plugin.settings = {}

        var $element = $(element), // reference to the jQuery version of DOM element
             element = element;    // reference to the actual DOM element

        // the "constructor" method that gets called when the object is created
        plugin.init = function() {

            // code goes here
			$element.each( function() {

				// variables
				var e = $(this);  
				var w = e.width();
				var v = e.find('option:selected').text();
				var id = e.attr('id');
				var count = 1;

				var state = 'normal';
				var bound = false;
				var x = 0;

				// give the element our class for CSS purposes
				e.addClass('sexyDrop')

				// we set height using CSS, so we wait to get this until after the class is added
				var h = e.outerHeight();

/*
				e.keydown(function(event) {
				  if (event.which == 40) {
					$(event.currentTarget).attr('size', '6');
					console.log(event);
				   }
				});
*/

				// if its IE7 we need to do some extra work with the fontSize property
				//if($.browser.msie && parseInt($.browser.version, 10) == 7) {

					e.css({opacity:0, fontSize: bigSize})
					var normalSize = 14;
					var bigSize = 22;

					// use fontSize if set as attribute in html markup
					if ( e.attr('fontSize') && e.attr('fontSize').length !== 0 )
						bigSize = e.attr('fontSize'); 

					// get the CSS fontSize of select elements
					$('body').append('<select id="puO762n19oMU4sdhQ1h5w7G5R3x767w5Exf1i22X6n26527N39SJJ344T4rc">');
					normalSize = $('#puO762n19oMU4sdhQ1h5w7G5R3x767w5Exf1i22X6n26527N39SJJ344T4rc').css('fontSize');
					$('#puO762n19oMU4sdhQ1h5w7G5R3x767w5Exf1i22X6n26527N39SJJ344T4rc').remove();

					// Events to adjust font size
					e.live('mousedown', function() {
						e.css({fontSize: normalSize});
					});
					e.live('blur', function() {
						e.css({fontSize: bigSize});
					});

				//}

				//else
					e.css({opacity:0})

				// get ID from select element otherwise we generate one for custom CSS
				if (id===undefined)
					id = 'sexyDrops_'+count;
				else
					id = 'sexyDrops_'+id;
				++count;

				// lets add some HTML so we can layer elements / style with CSS
				e.wrap('<div class="sexyDropWrapper off '+state+'" id="'+id+'">');
				e.parent('.sexyDropWrapper').prepend('<div class="sexyDropUI"><span>'+v+'</span></div>');

				// CHANGE: update the text display
				e.live('change', function() {
					e.parent('.sexyDropWrapper').find('.sexyDropUI span').html(e.find('option:selected').text());
				});

			}); //end each loop

        }

        // public methods
        // these methods can be called like:
        // plugin.methodName(arg1, arg2, ... argn) from inside the plugin or
        // element.data('sexyDrops').publicMethod(arg1, arg2, ... argn) from outside 
        // the plugin, where "element" is the element the plugin is attached to;

        // a public method. for demonstration purposes only - remove it!
        plugin.refresh = function(el) {

			el.each( function() {

				//setup and styling
				var e = $(this);
				var w = e.outerWidth();
				var wrapper = $(this).parent('.sexyDropWrapper');
				var UI = wrapper.find('.sexyDropUI');

				var state = 'normal';

				// use font size if set
				if ( e.attr('fontSize') && e.attr('fontSize').length !== 0 )
					size = e.attr('fontSize'); 

				if ( e.hasClass('valid') )
					state = 'valid'; 
				else if ( e.hasClass('invalid') )
					state = 'invalid';

				$(this).parent('.sexyDropWrapper').removeClass('valid invalid normal').addClass(state);

			})
        }

        // fire up the plugin!
        // call the "constructor" method
        plugin.init();
        $(window).resize( function() {
			plugin.refresh($element);
		});

    }

    // add the plugin to the jQuery.fn object
    $.fn.sexyDrops = function(options) {

        // iterate through the DOM elements we are attaching the plugin to
        return this.each(function() {

            // if plugin has not already been attached to the element
            if (undefined == $(this).data('sexyDrops')) {

                // create a new instance of the plugin
                // pass the DOM element and the user-provided options as arguments
                var plugin = new $.sexyDrops(this, options);

                // in the jQuery version of the element
                // store a reference to the plugin object
                // you can later access the plugin and its methods and properties like
                // element.data('sexyDrops').publicMethod(arg1, arg2, ... argn) or
                // element.data('sexyDrops').settings.propertyName
                $(this).data('sexyDrops', plugin);

                var $this = $(this);

            }

        });

    }

})(jQuery);
